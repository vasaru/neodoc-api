/*
 * File: app/view/network/IpNumberGrid.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('NeoDoc.view.network.IpNumberGrid', {
    extend: 'Ext.grid.Panel',

    id: 'NetworkIpTabGrid',
    itemId: 'NetworkIpTabGrid',
    autoScroll: true,
    header: false,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            features: [
                {
                    ftype: 'grouping',
                    groupByText: 'status',
                    startCollapsed: true
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 126,
                    defaultWidth: 140,
                    sortable: false,
                    dataIndex: 'ipv4',
                    text: 'IP'
                },
                {
                    xtype: 'gridcolumn',
                    width: 166,
                    dataIndex: 'description',
                    text: 'Description',
                    editor: {
                        xtype: 'textareafield',
                        name: 'description'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'status',
                    groupable: true,
                    text: 'Status',
                    editor: {
                        xtype: 'combobox',
                        name: 'statusfield',
                        allowBlank: false,
                        allowOnlyWhitespace: false,
                        editable: false,
                        queryMode: 'local',
                        store: 'IpStatusStore',
                        valueField: 'name'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 134,
                    dataIndex: 'devicename',
                    text: 'Device'
                },
                {
                    xtype: 'datecolumn',
                    dataIndex: 'updated_at',
                    text: 'Last Updated'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'updated_by',
                    text: 'Last Updated By'
                },
                {
                    xtype: 'actioncolumn',
                    dataIndex: 'action',
                    items: [
                        {

                        }
                    ]
                }
            ],
            plugins: [
                Ext.create('Ext.grid.plugin.CellEditing', {

                })
            ],
            listeners: {
                itemcontextmenu: {
                    fn: me.onNetworkIpTabGridItemContextMenu,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onNetworkIpTabGridItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        var x,y,show=false;
        var menu1;

        console.log("In Grid Context Menu");
        console.log("With record.data.id="+record.data.id);
        console.log("With record.data.status="+record.data.status);

        switch(record.data.status) {
            case 'Available':
            show = true;
            var callerId = this.id;
            menu1= new Ext.menu.Menu({
                itemid: 'networkAvailableMenu',
                items: [
                {
                    xtype: 'menuitem',
                    text: 'Add Device...',
                    itemid: 'networkMenuNewDevice',
                    handler: function() {
                        var win = Ext.create('NeoDoc.view.device.CreateWindow', {});
                        var pid = win.down('#deviceParentId');
                        var caller = win.down('#deviceCallerId');
                        pid.setValue(record.data.id);
                        caller.setValue(callerId);
                        win.show();
                    }
                },
                {
                    xtype: 'menuitem',
                    text: 'New Document...',
                    action: 'onCreateDocument',
                    itemid: 'documentMenuNewNetwork',
                    disabled: true
                }            
                ]
            });
            break;
            case 'Gateway':
            show = true;
            menu1= new Ext.menu.Menu({
                itemid: 'networkGatewayMenu',
                items: [
                {
                    xtype: 'menuitem',
                    text: 'Add Device...',
                    itemid: 'networkMenuNewDevice',
                    handler: function() {
                        var win = Ext.create('NeoDoc.view.device.CreateWindow', {});
                        var pid = win.down('#deviceParentId');
                        var caller = win.down('#deviceCallerId');
                        pid.setValue(record.data.id);
                        caller.setValue(this.id);
                        win.show();
                    }
                },
                {
                    xtype: 'menuitem',
                    text: 'New Document...',
                    action: 'onCreateDocument',
                    itemid: 'documentMenuNewNetwork',
                    disabled: true
                }            
                ]
            });

        }

        if (show) {
            x = e.browserEvent.clientX;
            y = e.browserEvent.clientY;
            console.log("X="+x);
            console.log("Y="+y);
            //menu1.showAt([x,y]);
            menu1.showAt(e.getXY());
            e.stopEvent();
        }

    }

});