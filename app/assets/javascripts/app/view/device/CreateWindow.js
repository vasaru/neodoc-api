/*
 * File: app/view/device/CreateWindow.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('NeoDoc.view.device.CreateWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.devicecreatewindow',

    height: 502,
    width: 749,
    layout: {
        type: 'card'
    },
    title: 'New Device',
    maximizable: true,
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'deviceCancelBtn',
                            text: 'Cancel'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            itemId: 'devicePreviousBtn',
                            text: 'Previous',
                            listeners: {
                                click: {
                                    fn: me.onDevicePreviousBtnClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'deviceNextBtn',
                            text: 'Next',
                            listeners: {
                                click: {
                                    fn: me.onDeviceNextBtnClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            width: 20
                        },
                        {
                            xtype: 'button',
                            action: 'newdevice',
                            disabled: true,
                            itemId: 'deviceSubmitBtn',
                            text: 'Submit'
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'form',
                    itemId: 'newDevice-1',
                    layout: {
                        type: 'fit'
                    },
                    bodyPadding: 10,
                    items: [
                        {
                            xtype: 'fieldset',
                            height: 195,
                            title: 'My Fields',
                            items: [
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    id: 'device.name',
                                    itemId: 'deviceName',
                                    fieldLabel: 'Device Name',
                                    name: 'name',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'combobox',
                                    anchor: '100%',
                                    id: 'device.type',
                                    itemId: 'deviceType',
                                    fieldLabel: 'Device Type',
                                    name: 'deviceType',
                                    editable: false,
                                    store: [
                                        [
                                            'VM',
                                            'VM'
                                        ],
                                        [
                                            'Physical',
                                            'Physical'
                                        ],
                                        [
                                            'Switch',
                                            'Switch'
                                        ]
                                    ],
                                    valueField: 'name'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    itemId: 'deviceParentId',
                                    fieldLabel: 'Label',
                                    name: 'pid'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    itemId: 'deviceCallerId',
                                    fieldLabel: 'Label',
                                    name: 'callerid'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    itemId: 'csrf_token',
                                    fieldLabel: 'Label',
                                    name: 'authenticity_token'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'form',
                    itemId: 'newDevice-3',
                    layout: {
                        type: 'fit'
                    },
                    bodyPadding: 10,
                    items: [
                        {
                            xtype: 'fieldset',
                            border: 0,
                            height: 215,
                            width: 559,
                            layout: {
                                type: 'fit'
                            },
                            items: [
                                {
                                    xtype: 'label',
                                    text: 'Confirm that the information below is correct:'
                                },
                                {
                                    xtype: 'displayfield',
                                    border: 2,
                                    height: 334,
                                    itemId: 'newDeviceSummary'
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onDevicePreviousBtnClick: function(button, e, eOpts) {
        var me = this, item = this.getLayout().activeItem.itemId;
        var i = item.split('newDevice-')[1];
        var nextbtn = this.down('#deviceNextBtn');
        var form = this.down('#newDevice-1');


        console.log("prev btn clicked, "+i);
        console.log("next btn = "+nextbtn.itemId);
        console.log("this.itemID="+this.itemId);
        if(i > 1) {
            var prev = parseInt(i,10)-1;
            nextbtn.setDisabled(false);
            console.log("Setting activeItem to newDevice-"+prev);
            this.layout.setActiveItem("newDevice-"+prev);
            if(prev === 1) {
                button.setDisabled(true);

            } else {
                button.setDisabled(false);
            }
        }      
    },

    onDeviceNextBtnClick: function(button, e, eOpts) {
        var me = this, item = this.getLayout().activeItem.itemId;
        var i = item.split('newDevice-')[1];
        var prev = this.down('#devicePreviousBtn');
        var submit = this.down('#deviceSubmitBtn');
        var form = this.down('#newDevice-1').getForm();
        var store;

        if(form.isValid()) {
            console.log("Next btn clicked, activeitem="+i);
            console.log("Prev btn = "+prev.itemId);
            console.log("this.itemID="+this.itemId);
            var selId = this.down('#deviceType').getValue();
            console.log("DeviceType Selected="+selId);

            var next = parseInt(i,10)+1;

            switch(selId) {
                case "VM":
                if(next==2) {
                    if(!this.getComponent('newDevice-'+next)) {
                        //                var vmdetailpanel=this.getLayout("newDevice-"+next);
                        var vmform = Ext.create('NeoDoc.view.device.newVMForm', {
                            itemId: 'newDevice-'+next,
                            cls: 'Device'
                        });
                    } else {
                        var vmform = this.getComponent('newDevice-'+next);
                    }
                    // vmdetailform.removeAll();                
                    //                vmdetailpanel.add(vmform);
                    prev.setDisabled(false);
                    console.log("Setting activeItem to newDevice-"+next);
                    this.layout.setActiveItem(vmform);
                }
                if(next === 3) {
                    // var summary = this.getComponent('newDevice-'+next)
                    var sum = this.down('#newDeviceSummary');
                    var form2 = this.down('#newDevice-2').getForm();

                    var sumtext = '<b>Name:</b> '+form.findField('device.name').getValue()+'<br>'+
                    '<b>Type:</b> '+form.findField('device.type').getValue()+'<br>'+
                    '<b>OS: </b> '+form2.findField('device.vm.os').rawValue+'<br>';
                    sum.setValue(sumtext);

                    button.setDisabled(true);
                    submit.setDisabled(false);

                    this.layout.setActiveItem('newDevice-'+next);

                } else {
                    button.setDisabled(false);
                    submit.setDisabled(true);
                }


            };


            /*    store = this.down('#deviceType').getStore();
            var intId = store.find('id',selId);
            var dataEntry = store.getAt(intId);

            //    console.log('Devicetype selected '+dataEntry);

            console.log('formdata='+unescape(dataEntry.get('formdata')));
            if(i < 3) {
                var next = parseInt(i,10)+1;

                if(next==2) { 
                    var form2=this.down('#devTypeFieldSet');
                    form2.title='New Device';
                    form2.removeAll();
                    console.log('Adding '+unescape(dataEntry.get('formdata')));
                    form2.add(Ext.decode(unescape(dataEntry.get('formdata'))).data);

                    //form2.add(Ext.decode(unescape(dataEntry.get('formdata')).data));
                    //form2.doLayout();

                }


                prev.setDisabled(false);
                console.log("Setting activeItem to newDevice-"+next);
                this.layout.setActiveItem("newDevice-"+next);
                if(next === 3) {
                    var sum = this.down('#newDeviceSummary');
                    sum.html = dataEntry.get('name');
                    button.setDisabled(true);

                } else {
                    button.setDisabled(false);
                }
            }      */
        }
    }

});