/*
 * File: app/controller/Device.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('NeoDoc.controller.Device', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'deviceCreateWindow',
            selector: 'devicecreatewindow'
        },
        {
            ref: 'MainTabPanel',
            selector: 'maintabpanel'
        },
        {
            ref: 'deviceMainTab',
            selector: 'devicemaintab'
        },
        {
            ref: 'devfoldertabgrid',
            selector: 'DevFolderTab-Grid'
        }
    ],

    onCreateDevice: function(button, e, eOpts) {
        console.log("In onCreateDevice");
        var me = this,
            win = this.getDeviceCreateWindow(),
            form1 = win.down('#newDevice-1').getForm(),
            form2 = win.down('#newDevice-2').getForm();
        if (form1.isValid() && form2.isValid()) {    
            win.setLoading('Submitting...');
            Ext.Ajax.request({
                url: '/api/devices',
                params: Ext.encode({
                    formData1: form1.getValues(),
                    formData2: form2.getValues()
                }),
                headers: {'Accept':'application/vnd.neodocapi.v1' },
                method: 'POST',
                success: function(result, action) {
                    Ext.Msg.alert('Created device successfully!');
                    win.setLoading(false);
                    win.destroy();
                    var grid = Ext.getCmp(JSON.parse(action.params).formData1.callerid);
                    grid.setLoading(true);
                    grid.getStore().reload();
                    grid.setLoading(false);
                },
                failure: function(result, action) {
                    Ext.Msg.alert('Failed to create device!\n\n'+result);
                    win.setLoading(false);
                }
            });
        }
    },

    onGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        console.log("Double click");
        console.log(record);

        var maintab = this.getMainTabPanel(),
            activetab = maintab.activeTab;


        var tab = activetab.getChildByElement('DeviceTab-GeneralPanel-'+record.data.id);

        if(!tab) {

            maintab.setLoading(true);

            var generaltab = Ext.create('Ext.panel.Panel', {
                title: 'Device - '+record.data.name,
                id: 'DeviceTab-GeneralPanel-'+record.data.id,
                itemId: 'DeviceTab-GeneralPanel-'+record.data.id,
                cls: 'Device',
                layout: {
                    type: 'accordion'
                }
            });



            var generalinfo = Ext.create('NeoDoc.view.device.GeneralPanel', {
                title: 'General Info',
                id: 'DeviceTab-GeneralInfoPanel-'+record.data.id,
                itemId: 'DeviceTab-GeneralInfoPanel-'+record.data.id,
                cls: 'Device',
                resizeable: true
            });

            generaltab.add(generalinfo);

            if(record.data.ipnumbers) {
                var netstore = Ext.create('NeoDoc.store.DeviceNetworkInfoStore');
                netstore.storeId = 'DeviceNetworkInfoStore-'+record.data.id;


                var ippanel = Ext.create('NeoDoc.view.device.IpNumberPanel', {
                    title: 'IpNumbers',
                    id: 'DeviceTab-Ipnumber-'+record.data.id,
                    itemId: 'DeviceTab-Ipnumber-'+record.data.id,
                    cls: 'Device',
                    closable: false,
                    layout: {
                        type: 'border'
                    }
                });


                var ipgrid = Ext.create('NeoDoc.view.device.IpNumberGrid', {
                    title: 'IpNumberGrid',
                    region: 'center',
                    flex: 1,
                    id: 'DeviceTab-IpnumberGrid-'+record.data.id,
                    cls: 'Device',
                    store: netstore,
                    closable: false,
                    dockedItems: [
                    {
                        xtype: 'pagingtoolbar',
                        itemId: 'IpNumberGridToolbar',
                        dock: 'bottom',
                        displayInfo: true,
                        store: netstore,
                        items: [
                        {
                            xtype: 'button',
                            itemId: 'adddeviceipaddressbtn',
                            iconCls: 'network-icon',
                            text: 'Add IP Address',
                            action: 'deviceaddipaddress'
                        }
                        ]
                    }
                    ]
                });        

                var netinfopanel = Ext.create('NeoDoc.view.device.NetworkInfoPanel', {
                    title: 'Network Info',
                    region: 'south',
                    flex: 2,
                    id: 'DeviceTab-Info-'+record.data.id,
                    itemId: 'DeviceTab-Info-'+record.data.id,
                    cls: 'Device',
                    closable: false
                });

                ippanel.add(ipgrid);
                ippanel.add(netinfopanel);


                netstore.getProxy().extraParams.whattoget='getdevicenetwork';
                netstore.getProxy().extraParams.deviceid=record.data.id;

                netstore.load({
                    callback : function(records, operation, success) {
                        console.log(records); 
                        netinfopanel.data = record.data.ipnumbers[0].network;
                        netinfopanel.update(record.data.ipnumbers[0].network);
                    }
                });


                generaltab.add(ippanel);

            }    



            generaltab.add(Ext.create('Ext.panel.Panel', {
                title: 'Comments',
                id: 'DeviceTab-GeneralTestPanel-'+record.data.id,
                itemId: 'DeviceTab-GeneralTestPanel-'+record.data.id,
                cls: 'Device'

            }));

            generaltab.add(Ext.create('Ext.panel.Panel', {
                title: 'Related documents',
                id: 'DeviceTab-GeneralDocumentPanel-'+record.data.id,
                itemId: 'DeviceTab-GeneralDocumentPanel-'+record.data.id,
                cls: 'Device'

            }));

            generalinfo.data = record.data;
            generalinfo.update(record.data);

            activetab.add(generaltab);


            activetab.setActiveTab(generaltab);
            maintab.setLoading(false);

            console.log('Displayed tab');
        } else {
            maintab.setActiveTab(tab);
        }
    },

    onAddDeviceIpAddress: function(button, e, eOpts) {
        console.log('In onAddDeviceIpAddress');

        var win=Ext.create('NeoDoc.view.network.selectIpWin');

        var treegridstore = Ext.create('NeoDoc.store.NetworkIpTreeStore');

        var owner = button.ownerCt.ownerCt.ownerCt,
            ownerid = owner.id.split("-")[2],
            ownerlocationid = owner.ownerCt.ownerCt.id.split("-")[1],
            grid = button.ownerCt.ownerCt,
            gridstore = grid.getStore(),
            treegrid = win.down('#networkIpTreeGrid'),
            gridform = win.down('#networkIpTreeGridForm');


        treegrid.getView().store = treegridstore;


        treegridstore.getRootNode().setId(ownerlocationid);


        treegridstore.getProxy().extraParams.whattoget='getdevicenetworktree';
        treegridstore.getProxy().extraParams.deviceid=ownerid;
        treegridstore.getProxy().extraParams.locid=ownerlocationid;

        treegrid.getView().getStore().load();



        treegridstore.load({
            callback : function(records, operation, success) {
                console.log(records); 
                win.show();
            }
        });




    },

    onNewdevicetab: function(record) {
        console.log('in onNewdevicetab');
        console.log(record);

        var me = this,
            maintab = me.getMainTabPanel();




    },

    onNewdevicefoldertab: function(record) {
        var me = this,
            maintab = me.getMainTabPanel();

        console.log('in onNewdevicefoldertab');
        console.log(record);

        console.log('panelId=DevFolderTab-'+record.parentId);

        var tab = maintab.getChildByElement('DevFolderTab-'+record.parentId);

        if(!tab) {

            maintab.setLoading(true);


            var devstore = Ext.create('NeoDoc.store.DeviceFolderStore');
            devstore.storeId = 'DeviceFolderStore-'+record.parentId;
            devstore.defaultRootId = record.parentId;


            var devfoldertab = Ext.create('NeoDoc.view.network.MainTabPanel', {
                title: 'Devices - '+record.parentName,
                id: 'DevFolderTab-'+record.parentId,
                itemId: 'DevFolderTab-'+record.parentId,
                cls: 'DeviceFolder',
                closable: true
            });


            Ext.define('NeoDoc.view.device.override.FolderGrid', {    
                override: 'NeoDoc.view.device.FolderGrid',
                plugins: [{ 
                    ptype: 'rowexpander',
                    rowBodyTpl : new Ext.XTemplate(
                    '<span><p><b>OS:</b><tpl for="operatingsystem">{name}</tpl> <tpl for="osversion">{name}</tpl></p></span>',
                    '<span><b>IP Address:</b> <tpl for="ipnumbers">{ipv4}</tpl></span>'

                    )

                }]
            }); 


            var devfoldergrid = Ext.create('NeoDoc.view.device.FolderGrid', {
                title: 'All Devices',
                id: 'DevFolderTab-Grid'+record.parentId,
                cls: 'DeviceFolder',
                store: devstore,
                closable: false,
                dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true,
                    store: devstore

                }
                ]
            });



            devstore.getProxy().extraParams.whattoget='getlocationdevices';
            devstore.getProxy().extraParams.locationid=record.parentId;


            //        ipgridpage.bindStore(ipstore);
            //        ipgrid.reconfigure(ipstore);

            devstore.loadPage(1);

            devfoldertab.add(devfoldergrid);

            maintab.add(devfoldertab);

            maintab.setActiveTab(devfoldertab);
            maintab.setLoading(false);
        } else {
            maintab.setActiveTab(tab);
        }


    },

    onItemDblClick: function(dataview, record, item, index, e, eOpts) {
        console.log('In Item Dbl Click with record '+record);

        var parent = this.getBubbleParent();


    },

    init: function(application) {
        this.control({
            "devicecreatewindow button[action=newdevice]": {
                click: this.onCreateDevice
            },
            "#devfoldertabgrid": {
                itemdblclick: this.onGridpanelItemDblClick
            },
            "#IpNumberGridToolbar button[action=deviceaddipaddress]": {
                click: this.onAddDeviceIpAddress
            }
        });

        application.on({
            newdevicetab: {
                fn: this.onNewdevicetab,
                scope: this
            },
            newdevicefoldertab: {
                fn: this.onNewdevicefoldertab,
                scope: this
            }
        });
    }

});
