/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.Loader.setConfig({
	enabled: true,
});

Ext.application({
	<% Dir[File.expand_path('/app/*/', __FILE__)].each do |subdir| %>
		<%= File.basename(subdir) %>s: <%=
			# omit all file extensions (js, js.erb, etc.) from the file name
			Dir[subdir + '/*.js*'].map {|f| File.basename(f)[/^[^.]+/] }.to_json
		%>,
	<% end %>
	
    models: [
        'locationTreeModel',
        'network.IpModel',
        'network.InfoModel',
        'device.IpnumbersGrid'
    ],
    stores: [
        'countryStore',
        'IpnumberStore',
        'IpStatusStore',
        'NetworkInfoStore',
        'NetworkIpTreeStore',
        'OperatingSystemStore',
        'DeviceTypeStore',
        'VersionStore',
        'configStore',
        'customer.TreeStore',
        'config.OperatingSystemStore',
        'DeviceNetworkInfoStore'
//        'navTreeStore'
    ],
    requires: [
        'Ext.util.History'
    ],
    views: [
        'LoginWindow',
        'NeoViewPort',
        'location.mainpanel',
        'location.TreePanel'
    ],
    autoCreateViewport: false,
    controllers: [
 //       'App',
        'Authentication',
        'Location',
        'Network',
        'Device',
        'Configuration',
        'Customers'
    ],
    name: 'NeoDoc',
    appFolder: '/assets/app',
    namespaces: [
        'neodoc'
    ],
    launch: function( args ) {
        // "this" = Ext.app.Application
        var me = this;
        // init Ext.util.History on app launch; if there is a hash in the url,
        // our controller will load the appropriate content
        Ext.util.History.init(function(){
            var hash = document.location.hash;
            me.getAppController().fireEvent( 'tokenchange', hash.replace( '#', '' ) );
        })
        // add change handler for Ext.util.History; when a change in the token
        // occurs, this will fire our controller's event to load the appropriate content
        Ext.util.History.on( 'change', function( token ){
            me.getAppController().fireEvent( 'tokenchange', token );
        });
    }
});


Ext.onReady(function(){
		Ext.Ajax.on('beforerequest', function(conn, options) {
				// always include the auth_token.. 
			var currentUser = Ext.decode( localStorage.getItem('neodocUser'));

			if( currentUser !== null){
				var auth_token_value = currentUser['auth_token'];
				Ext.Ajax.extraParams = { auth_token: auth_token_value };
			}
			// include the csrf prevention 
			var content, metatag;
			metatag = Ext.select('meta[name="csrf-token"]');
			if (metatag.first() != null) {
			  	content = metatag.first().dom.content;
			  	options.headers || (options.headers = {});
			  	return options.headers["X-CSRF-Token"] = content;
			}
		  }, this);

});
